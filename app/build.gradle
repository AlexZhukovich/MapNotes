apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion = "$jacoco_version"
    reportsDir = file("$buildDir/reports")
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

kotlinGenerated {
    // The annotation to annotate the generated methods with
    annotation = "lombok.Generated"

    // A flag to indicate whether the annotation should be visible at runtime
    visible = true
}

configurations {
    ktlint
}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.alex.mapnotes"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "google_maps_api_key", "$System.env.MAP_NOTES_GOOGLE_MAPS_API_KEY")
        }
        debug {
            testCoverageEnabled true
            resValue("string", "google_maps_api_key", "$System.env.MAP_NOTES_GOOGLE_MAPS_API_KEY")
        }
    }
    testOptions {
        animationsDisabled = true
        unitTests {
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
            includeAndroidResources = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude  'META-INF/main.kotlin_module'
    }
}

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/BuildConfig.*',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*']

    def debugKotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/devDebug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom([mainSrc])
    getClassDirectories().setFrom(files([debugKotlinTree]))

    def localTestsFiles = fileTree("${buildDir}/jacoco/")
            .filter { it.name.endsWith(".exec") }
            .filter { it.isFile() }
    def instrumentationTestsFiles = fileTree("${buildDir}/outputs/code_coverage/debugAndroidTest/connected/")
            .filter { it.name.endsWith(".ec") }
            .filter { it.isFile() }

    getExecutionData().setFrom(files(localTestsFiles + instrumentationTestsFiles))
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "--reporter=plain",
            "--reporter=checkstyle,output=${buildDir}/reports/ktlint/checkstyle.xml",
            "${projectDir}/**/src/**/*.kt"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // KtLint
    ktlint "com.github.shyiko:ktlint:$ktlint_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"

    // App Compat
    implementation "androidx.appcompat:appcompat:$app_compat_version"

    // Material Design Components
    implementation "com.google.android.material:material:$material_design_version"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Google play services
    implementation "com.google.android.gms:play-services-maps:$maps_play_services_version"
    implementation "com.google.android.gms:play-services-location:$play_services_version"

    // Firebase
    implementation "com.google.firebase:firebase-auth:$firebase_auth_version"
    implementation "com.google.firebase:firebase-database:$firebase_database_version"
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    implementation 'com.google.android.gms:play-services-basement:17.5.0'

    // Koin
    implementation "org.koin:koin-core:$koin_version"
    implementation "org.koin:koin-android:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"
    androidTestImplementation "org.koin:koin-test:$koin_version"

    // JUnit
    testImplementation "junit:junit:$junit_version"

    // MockK
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"

    // Robolectric
    testImplementation "org.robolectric:robolectric:$robolectric_version"

    // Android test runner and rules
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestImplementation "androidx.test:core:$test_core_version"
    androidTestImplementation "androidx.test.ext:junit:$test_junit_version"
    androidTestImplementation "androidx.test:rules:$test_rules_version"

    // Kakao
    androidTestImplementation "com.agoda.kakao:kakao:$kakao_version"

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_intents_version"

    // UIAutomator
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiuatomator_version"
}
apply plugin: 'com.google.gms.google-services'