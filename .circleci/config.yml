version: 2

references:

  ## Cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace
  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker images
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx990m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1800m"'
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:216.0.0
    environment:
      TERM: dumb

  ## Google Services

  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  ## Google Cloud Service
  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json

jobs:

  ## Build dev debug APK and instrumented test APK
  build_dev_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew :app:assembleDevDebug :app:assembleDevDebugAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  ## Build prod debug APK and instrumented test APK
  build_prod_debug:
    <<: *android_config
    steps:
    - checkout
    - *restore_cache
    - run:
        name: chmod permissions
        command: chmod +x ./gradlew
    - run:
        name: Download dependencies
        command: ./gradlew androidDependencies
    - *save_cache
    - *export_gservices_key
    - *decode_gservices_key
    - run:
        name: Gradle build (debug)
        command: ./gradlew :app:assembleProdDebug :app:assembleProdDebugAndroidTest
    - *persist_debug_workspace
    - store_artifacts:
        path: app/build/outputs/apk/
        destination: /apk/

  ## Run unit tests
  test_dev_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDevDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ## Run unit tests
  test_prod_unit:
    <<: *android_config
    steps:
    - checkout
    - *restore_cache
    - run:
        name: chmod permissions
        command: chmod +x ./gradlew
    - run:
        name: Download dependencies
        command: ./gradlew androidDependencies
    - *save_cache
    - *export_gservices_key
    - *decode_gservices_key
    - run:
        name: Run unit tests
        command: ./gradlew -PciBuild=true :app:testProdDebugUnitTest
    - *persist_debug_workspace
    - store_artifacts:
        path: app/build/reports/
        destination: /reports/
    - store_test_results:
        path: app/build/test-results/
        destination: /test-results/

  ## Run dev instrumentation tests
  test_dev_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project mapnotes-ea9d9
      - run:
          name: Authenticate with Google Cloud
          command: >
            gcloud auth activate-service-account firebase-adminsdk-ovtn6@mapnotes-ea9d9.iam.gserviceaccount.com \
              --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: >
            gcloud firebase test android run \
              --type instrumentation \
              --app app/build/outputs/apk/dev/debug/app-dev-debug.apk \
              --test app/build/outputs/apk/androidTest/dev/debug/app-dev-debug-androidTest.apk \
              --device model=Pixel2,version=28,locale=en_US,orientation=portrait \
              --timeout 20m \
              --environment-variables coverage=true,coverageFile=/sdcard/dev-coverage.ec --directories-to-pull=/sdcard/
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-481xmdq2w17is-h08zk45a575ds | tail -1`/Pixel2-28-en_US-portrait/artifacts/sdcard/dev-coverage.ec" /root/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Run prod instrumentation tests
  test_prod_instrumented:
    <<: *gcloud_config
    steps:
    - *attach_debug_workspace
    - *export_gcloud_key
    - *decode_gcloud_key
    - run:
        name: Set Google Cloud target project
        command: gcloud config set project mapnotes-ea9d9
    - run:
        name: Authenticate with Google Cloud
        command: >
          gcloud auth activate-service-account firebase-adminsdk-ovtn6@mapnotes-ea9d9.iam.gserviceaccount.com \
            --key-file ${HOME}/client-secret.json
    - run:
        name: Run instrumented test on Firebase Test Lab
        command: >
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/prod/debug/app-prod-debug.apk \
            --test app/build/outputs/apk/androidTest/prod/debug/app-prod-debug-androidTest.apk \
            --device model=Pixel2,version=28,locale=en_US,orientation=portrait \
            --timeout 20m \
            --environment-variables coverage=true,coverageFile=/sdcard/prod-coverage.ec --directories-to-pull=/sdcard/
    - run:
        name: Create directory to store test results
        command: mkdir firebase
    - run:
        name: Download instrumented test results from Firebase Test Lab
        command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-481xmdq2w17is-h08zk45a575ds | tail -1`*" /root/workspace/firebase/
    - *persist_firebase_workspace
    - store_artifacts:
        path: firebase/
        destination: /firebase/

  ## Generate Coverage Report
  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: chmod permissions
          command: chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *export_gservices_key
      - *decode_gservices_key    
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase dev coverage report
          command: >
            mkdir -p app/build/outputs/code_coverage/devDebugAndroidTest/connected && \
              cp firebase/Pixel2-28-en_US-portrait/artifacts/sdcard/dev-coverage.ec app/build/outputs/code_coverage/devDebugAndroidTest/connected/dev-coverage.ec
      - run:
          name: Move Firebase prod coverage report
          command: >
            mkdir -p app/build/outputs/code_coverage/devDebugAndroidTest/connected && \
              cp firebase/Pixel2-28-en_US-portrait/artifacts/sdcard/prod-coverage.ec app/build/outputs/code_coverage/devDebugAndroidTest/connected/prod-coverage.ec
      - run:
          name: Generate lint report
          command: ./gradlew :app:lint
      - run:
          name: Generate ktlint report
          command: ./gradlew :app:ktlint
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true :app:jacocoDevTestReport
      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

workflows:
  version: 2
  workflow:
    jobs:
      - build_dev_debug
      - build_prod_debug
      - test_dev_unit
      - test_prod_unit
      - test_dev_instrumented:
          requires:
            - build_dev_debug
      - test_prod_instrumented:
          requires:
          - build_prod_debug
      - report_coverage:
          requires:
            - test_dev_unit
            - test_dev_instrumented
            - test_prod_unit
            - test_prod_instrumented